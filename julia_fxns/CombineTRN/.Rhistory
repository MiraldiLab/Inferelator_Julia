                cluster_row_slices = F,
                cluster_column_slices = F,
                top_annotation = colAnn,
                column_order = col_order,
                show_column_names = F,
                column_names_side = 'top',
                column_split = factor(metabulk$celltype_condition, levels = celltype_timepoint),
                left_annotation = leftAnn,
                right_annotation = rightAnn,
                column_title = TF,
                bottom_annotation = bottom_Ann)
  pdf(file.path(outdir_heatmap,paste0(TF,'.pdf')),height=9,width=12)
  draw(h1)
  dev.off()
k_clust_TF
length(network_targs)
if (length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } 
  else if (length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } 
  else if (length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  }
  else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
  
if (length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } 
  else if (length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } 
  else if (length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  }
  else 
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
if (length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } 
  else if (length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } 
  else if (length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  }
  else 
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
if(length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } 
  else if(length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } 
  else if(length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  }
  else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
if(length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } else if(length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } else if(length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  } else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
k_clust_TF
TF <- TFs[i]
  ## central heatmap (target genes)
  #subset network
  network_tf <- network[which(network$TF == TF),]
  #get target genes to plot
  network_targs <- unique(network_tf$Gene)
  #cluster counts matrix
  if(length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } else if(length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } else if(length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  } else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
## bottom heatmaps (TFA, TFmRNA)
  counts_TF <- counts_z[TF,col_order]
  counts_TFA <- tfa_z[TF,col_order]
  mat_bottom <- rbind(counts_TF, counts_TFA)
  rownames(mat_bottom) <- c('TFmRNA','TFA')
  mat_bottom <- as.data.frame(mat_bottom)
  bottom_Ann <- HeatmapAnnotation(TFmRNA=t(mat_bottom[1,]),
                                  TFA=t(mat_bottom[2,]), col = list('TFmRNA'=heat_col,
                                                                 'TFA'=heat_col), show_legend = F,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), annotation_width = unit(c(1, 5), 'cm'), gap=unit(0.1,'cm'),annotation_name_side = 'left')
  ## right annotation (early vs late irgs)
  # IRGs
  #mat_right <- cluster_annot[intersect(rownames(cluster_annot),network_targs),]
  #mat_right <- rbind(mat_right, data.frame(row.names =  setdiff(network_targs, rownames(cluster_annot)),
  #                                         across=rep('5',length(setdiff(network_targs, rownames(cluster_annot)))),
  #                                         within=rep('5',length(setdiff(network_targs, rownames(cluster_annot)))),
  #                                         cluster=rep('5',length(setdiff(network_targs, rownames(cluster_annot))))))
  #mat_right <- mat_right[names(sort(k_clust_TF$cluster)),]
  #mat_right$across <- sort(k_clust_TF$cluster)
  #mat_right$cluster <- paste0(mat_right$across, mat_right$within)
  #mat_right <- mat_right[order(mat_right$cluster),]
  #mat_right$across <- factor(mat_right$across, levels=c(1,2,3,4,5,6),ordered=T)
  #mat_right$within <- gsub('1','Early IIG',mat_right$within)
  #mat_right$within <- gsub('4','Late IIG', mat_right$within)
  #mat_right$within <- gsub('3','Early IDG', mat_right$within)
  #mat_right$within <- gsub('2','Late IDG', mat_right$within)
  #mat_right$within <- gsub('5','non-IRG', mat_right$within)
  #mat_right$within <- factor(mat_right$within, levels= c('Early IIG','Late IIG','Early IDG','Late IDG','non-IRG'), ordered=T)
  # GSEA
  gsea_tf <- gsea_res[which(gsea_res$TF == TF),]
  #if (nrow(gsea_tf) >0){
  #gsea_mat <- as.data.frame(matrix(nrow=length(network_targs), ncol=length(gsea_tf$GeneSetName),0))
  #rownames(gsea_mat) <- network_targs
  #colnames(gsea_mat) <- gsea_tf$GeneSetName
  #for (i in 1:nrow(gsea_tf)){
  #  gsea_mat[intersect(strsplit(gsea_tf[i,'EnrichedGenes'], split=' ')[[1]],rownames(gsea_mat)),i] <- 1
  #}
  #gsea_mat <- gsub(0,'Not Enriched',gsea_mat)
  #gsea_mat <- gsub(1,'Enriched',gsea_mat)
  RR_Mat <- data.frame(RR = rep("Non-RR", length(network_targs)))
  rownames(RR_Mat) <- network_targs
  for(gene in network_targs){
    if(gene %in% RR_up){
        RR_Mat[gene,'RR'] <- "RR Up"
    }
    if(gene %in% RR_down){
        RR_Mat[gene,'RR'] <- "RR Down"
    }
  }
rightAnn <- HeatmapAnnotation(RR=as.matrix(RR_Mat),
                                col=list('RR'=c('RR Up'='red','RR Down'='blue', "Non-RR" = "grey90")),
                                gap=unit(0.1,'cm'),
                                border=T,
                                annotation_name_side = 'top',
                                annotation_name_gp = gpar(fontsize=7),
                                annotation_name_rot = 45,
                                which = "row")
  ## left annotations (partial correlation and stability)
  mat_left <- network_tf[,c('Gene','Stability','Correlation')]
  rownames(mat_left) <- mat_left$Gene
  #mat_left <- mat_left[rownames(mat_right),]
  leftAnn <- HeatmapAnnotation(`Partial Corr`=mat_left[,3],
                                  `Stability (%)`=mat_left[,2], col = list('Corr'=left_col_corr,
                                                                    'Stability'=left_col), show_legend = T,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), width = unit(4, 'cm'), gap=unit(0.1,'cm'),which='row',annotation_name_side='top')
  
  h1 <- Heatmap(counts_z[network_targs,col_order],
                name='Z-score',
                show_row_names = FALSE,
                #row_split=mat_right$across,
                show_column_dend =F,
                column_gap = splits,
                border = TRUE,
                row_title=paste0(TF,' targets (',length(network_targs),' genes)'),
                row_dend_reorder = F,
                use_raster = FALSE,
                col = heat_col,
                column_names_gp = gpar(fontsize = 6),
                show_row_dend = FALSE,
                row_km = dim(k_clust_TF$centers)[1],
                cluster_columns = F,
                cluster_row_slices = F,
                cluster_column_slices = F,
                top_annotation = colAnn,
                column_order = col_order,
                show_column_names = F,
                column_names_side = 'top',
                column_split = factor(metabulk$celltype_condition, levels = celltype_timepoint),
                left_annotation = leftAnn,
                right_annotation = rightAnn,
                column_title = TF,
                bottom_annotation = bottom_Ann)
  pdf(file.path(outdir_heatmap,paste0(TF,'.pdf')),height=9,width=12)
  draw(h1)
  dev.off()
for (i in 1:length(TFs)){
  TF <- TFs[i]
  ## central heatmap (target genes)
  #subset network
  network_tf <- network[which(network$TF == TF),]
  #get target genes to plot
  network_targs <- unique(network_tf$Gene)
  #cluster counts matrix
  if(length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } else if(length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } else if(length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  } else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
  
  ## bottom heatmaps (TFA, TFmRNA)
  counts_TF <- counts_z[TF,col_order]
  counts_TFA <- tfa_z[TF,col_order]
  mat_bottom <- rbind(counts_TF, counts_TFA)
  rownames(mat_bottom) <- c('TFmRNA','TFA')
  mat_bottom <- as.data.frame(mat_bottom)
  bottom_Ann <- HeatmapAnnotation(TFmRNA=t(mat_bottom[1,]),
                                  TFA=t(mat_bottom[2,]), col = list('TFmRNA'=heat_col,
                                                                 'TFA'=heat_col), show_legend = F,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), annotation_width = unit(c(1, 5), 'cm'), gap=unit(0.1,'cm'),annotation_name_side = 'left')
  ## right annotation (early vs late irgs)
  # IRGs
  #mat_right <- cluster_annot[intersect(rownames(cluster_annot),network_targs),]
  #mat_right <- rbind(mat_right, data.frame(row.names =  setdiff(network_targs, rownames(cluster_annot)),
  #                                         across=rep('5',length(setdiff(network_targs, rownames(cluster_annot)))),
  #                                         within=rep('5',length(setdiff(network_targs, rownames(cluster_annot)))),
  #                                         cluster=rep('5',length(setdiff(network_targs, rownames(cluster_annot))))))
  #mat_right <- mat_right[names(sort(k_clust_TF$cluster)),]
  #mat_right$across <- sort(k_clust_TF$cluster)
  #mat_right$cluster <- paste0(mat_right$across, mat_right$within)
  #mat_right <- mat_right[order(mat_right$cluster),]
  #mat_right$across <- factor(mat_right$across, levels=c(1,2,3,4,5,6),ordered=T)
  #mat_right$within <- gsub('1','Early IIG',mat_right$within)
  #mat_right$within <- gsub('4','Late IIG', mat_right$within)
  #mat_right$within <- gsub('3','Early IDG', mat_right$within)
  #mat_right$within <- gsub('2','Late IDG', mat_right$within)
  #mat_right$within <- gsub('5','non-IRG', mat_right$within)
  #mat_right$within <- factor(mat_right$within, levels= c('Early IIG','Late IIG','Early IDG','Late IDG','non-IRG'), ordered=T)
  # GSEA
  gsea_tf <- gsea_res[which(gsea_res$TF == TF),]
  #if (nrow(gsea_tf) >0){
  #gsea_mat <- as.data.frame(matrix(nrow=length(network_targs), ncol=length(gsea_tf$GeneSetName),0))
  #rownames(gsea_mat) <- network_targs
  #colnames(gsea_mat) <- gsea_tf$GeneSetName
  #for (i in 1:nrow(gsea_tf)){
  #  gsea_mat[intersect(strsplit(gsea_tf[i,'EnrichedGenes'], split=' ')[[1]],rownames(gsea_mat)),i] <- 1
  #}
  #gsea_mat <- gsub(0,'Not Enriched',gsea_mat)
  #gsea_mat <- gsub(1,'Enriched',gsea_mat)
  RR_Mat <- data.frame(RR = rep("Non-RR", length(network_targs)))
  rownames(RR_Mat) <- network_targs
  for(gene in network_targs){
    if(gene %in% RR_up){
        RR_Mat[gene,'RR'] <- "RR Up"
    }
    if(gene %in% RR_down){
        RR_Mat[gene,'RR'] <- "RR Down"
    }
  }
  rightAnn <- HeatmapAnnotation(RR=as.matrix(RR_Mat),
                                col=list('RR'=c('RR Up'='red','RR Down'='blue', "Non-RR" = "grey90")),
                                gap=unit(0.1,'cm'),
                                border=T,
                                annotation_name_side = 'top',
                                annotation_name_gp = gpar(fontsize=7),
                                annotation_name_rot = 45,
                                which = "row")
  ## left annotations (partial correlation and stability)
  mat_left <- network_tf[,c('Gene','Stability','Correlation')]
  rownames(mat_left) <- mat_left$Gene
  #mat_left <- mat_left[rownames(mat_right),]
  leftAnn <- HeatmapAnnotation(`Partial Corr`=mat_left[,3],
                                  `Stability (%)`=mat_left[,2], col = list('Corr'=left_col_corr,
                                                                    'Stability'=left_col), show_legend = T,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), width = unit(4, 'cm'), gap=unit(0.1,'cm'),which='row',annotation_name_side='top')
  
  h1 <- Heatmap(counts_z[network_targs,col_order],
                name='Z-score',
                show_row_names = FALSE,
                #row_split=mat_right$across,
                show_column_dend =F,
                column_gap = splits,
                border = TRUE,
                row_title=paste0(TF,' targets (',length(network_targs),' genes)'),
                row_dend_reorder = F,
                use_raster = FALSE,
                col = heat_col,
                column_names_gp = gpar(fontsize = 6),
                show_row_dend = FALSE,
                row_km = dim(k_clust_TF$centers)[1],
                cluster_columns = F,
                cluster_row_slices = F,
                cluster_column_slices = F,
                top_annotation = colAnn,
                column_order = col_order,
                show_column_names = F,
                column_names_side = 'top',
                column_split = factor(metabulk$celltype_condition, levels = celltype_timepoint),
                left_annotation = leftAnn,
                right_annotation = rightAnn,
                column_title = TF,
                bottom_annotation = bottom_Ann)
  pdf(file.path(outdir_heatmap,paste0(TF,'.pdf')),height=9,width=12)
  draw(h1)
  dev.off()
for (i in 1:length(TFs)){
  TF <- TFs[i]
  ## central heatmap (target genes)
  #subset network
  network_tf <- network[which(network$TF == TF),]
  #get target genes to plot
  network_targs <- unique(network_tf$Gene)
  #cluster counts matrix
  if(length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } else if(length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } else if(length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  } else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
  
  ## bottom heatmaps (TFA, TFmRNA)
  counts_TF <- counts_z[TF,col_order]
  counts_TFA <- tfa_z[TF,col_order]
  mat_bottom <- rbind(counts_TF, counts_TFA)
  rownames(mat_bottom) <- c('TFmRNA','TFA')
  mat_bottom <- as.data.frame(mat_bottom)
  bottom_Ann <- HeatmapAnnotation(TFmRNA=t(mat_bottom[1,]),
                                  TFA=t(mat_bottom[2,]), col = list('TFmRNA'=heat_col,
                                                                 'TFA'=heat_col), show_legend = F,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), annotation_width = unit(c(1, 5), 'cm'), gap=unit(0.1,'cm'),annotation_name_side = 'left')
  gsea_tf <- gsea_res[which(gsea_res$TF == TF),]
  RR_Mat <- data.frame(RR = rep("Non-RR", length(network_targs)))
  rownames(RR_Mat) <- network_targs
  for(gene in network_targs){
    if(gene %in% RR_up){
        RR_Mat[gene,'RR'] <- "RR Up"
    }
    if(gene %in% RR_down){
        RR_Mat[gene,'RR'] <- "RR Down"
    }
  }
  rightAnn <- HeatmapAnnotation(RR=as.matrix(RR_Mat),
                                col=list('RR'=c('RR Up'='red','RR Down'='blue', "Non-RR" = "grey90")),
                                gap=unit(0.1,'cm'),
                                border=T,
                                annotation_name_side = 'top',
                                annotation_name_gp = gpar(fontsize=7),
                                annotation_name_rot = 45,
                                which = "row")
  ## left annotations (partial correlation and stability)
  mat_left <- network_tf[,c('Gene','Stability','Correlation')]
  rownames(mat_left) <- mat_left$Gene
  #mat_left <- mat_left[rownames(mat_right),]
  leftAnn <- HeatmapAnnotation(`Partial Corr`=mat_left[,3],
                                  `Stability (%)`=mat_left[,2], col = list('Corr'=left_col_corr,
                                                                    'Stability'=left_col), show_legend = T,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), width = unit(4, 'cm'), gap=unit(0.1,'cm'),which='row',annotation_name_side='top')
  h1 <- Heatmap(counts_z[network_targs,col_order],
                name='Z-score',
                show_row_names = FALSE,
                #row_split=mat_right$across,
                show_column_dend =F,
                column_gap = splits,
                border = TRUE,
                row_title=paste0(TF,' targets (',length(network_targs),' genes)'),
                row_dend_reorder = F,
                use_raster = FALSE,
                col = heat_col,
                column_names_gp = gpar(fontsize = 6),
                show_row_dend = FALSE,
                row_km = dim(k_clust_TF$centers)[1],
                cluster_columns = F,
                cluster_row_slices = F,
                cluster_column_slices = F,
                top_annotation = colAnn,
                column_order = col_order,
                show_column_names = F,
                column_names_side = 'top',
                column_split = factor(metabulk$celltype_condition, levels = celltype_timepoint),
                left_annotation = leftAnn,
                right_annotation = rightAnn,
                column_title = TF,
                bottom_annotation = bottom_Ann)
  pdf(file.path(outdir_heatmap,paste0(TF,'.pdf')),height=9,width=12)
  draw(h1)
  dev.off()
  #saveRDS(h1, file.path(outdir,'heatmap_data',paste0(TF,'.rds')))
  #write.table(mat_right, file.path(outdir,'clusters',paste0(TF,'clusters.tsv')), col.names = T, row.names = T, quote = F, sep='\t')
}
for (i in 1:length(TFs)){
  TF <- TFs[i]
  ## central heatmap (target genes)
  #subset network
  network_tf <- network[which(network$TF == TF),]
  #get target genes to plot
  network_targs <- unique(network_tf$Gene)
  #cluster counts matrix
  if(length(network_targs) > 6){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=6, nstart=20, iter.max = 50)
  } else if(length(network_targs) >4){
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=4, nstart=20, iter.max = 50)
  } else if(length(network_targs >2)) {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=2, nstart=20, iter.max = 50)
  } else {
    k_clust_TF <- kmeans(counts_z[network_targs,], centers=1, nstart=20, iter.max = 50)
  }
  
  ## bottom heatmaps (TFA, TFmRNA)
  counts_TF <- counts_z[TF,col_order]
  counts_TFA <- tfa_z[TF,col_order]
  mat_bottom <- rbind(counts_TF, counts_TFA)
  rownames(mat_bottom) <- c('TFmRNA','TFA')
  mat_bottom <- as.data.frame(mat_bottom)
  bottom_Ann <- HeatmapAnnotation(TFmRNA=t(mat_bottom[1,]),
                                  TFA=t(mat_bottom[2,]), col = list('TFmRNA'=heat_col,
                                                                 'TFA'=heat_col), show_legend = F,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), annotation_width = unit(c(1, 5), 'cm'), gap=unit(0.1,'cm'),annotation_name_side = 'left')
  gsea_tf <- gsea_res[which(gsea_res$TF == TF),]
  RR_Mat <- data.frame(RR = rep("Non-RR", length(network_targs)))
  rownames(RR_Mat) <- network_targs
  for(gene in network_targs){
    if(gene %in% RR_up){
        RR_Mat[gene,'RR'] <- "RR Up"
    }
    if(gene %in% RR_down){
        RR_Mat[gene,'RR'] <- "RR Down"
    }
  }
  rightAnn <- HeatmapAnnotation(RR=as.matrix(RR_Mat),
                                col=list('RR'=c('RR Up'='red','RR Down'='blue', "Non-RR" = "grey90")),
                                gap=unit(0.1,'cm'),
                                border=T,
                                annotation_name_side = 'top',
                                annotation_name_gp = gpar(fontsize=7),
                                annotation_name_rot = 45,
                                which = "row")
  ## left annotations (partial correlation and stability)
  mat_left <- network_tf[,c('Gene','Stability','Correlation')]
  rownames(mat_left) <- mat_left$Gene
  #mat_left <- mat_left[rownames(mat_right),]
  leftAnn <- HeatmapAnnotation(`Corr`=mat_left[,3],
                                  `Stability`=mat_left[,2], col = list('Corr'=left_col_corr,
                                                                    'Stability'=left_col), show_legend = T,name='TF',border=T,
                                  annotation_name_gp=gpar(fontsize=10), width = unit(4, 'cm'), gap=unit(0.1,'cm'),which='row',annotation_name_side='top')
  h1 <- Heatmap(counts_z[network_targs,col_order],
                name='Z-score',
                show_row_names = FALSE,
                #row_split=mat_right$across,
                show_column_dend =F,
                column_gap = splits,
                border = TRUE,
                row_title=paste0(TF,' targets (',length(network_targs),' genes)'),
                row_dend_reorder = F,
                use_raster = FALSE,
                col = heat_col,
                column_names_gp = gpar(fontsize = 6),
                show_row_dend = FALSE,
                row_km = dim(k_clust_TF$centers)[1],
                cluster_columns = F,
                cluster_row_slices = F,
                cluster_column_slices = F,
                top_annotation = colAnn,
                column_order = col_order,
                show_column_names = F,
                column_names_side = 'top',
                column_split = factor(metabulk$celltype_condition, levels = celltype_timepoint),
                left_annotation = leftAnn,
                right_annotation = rightAnn,
                column_title = TF,
                bottom_annotation = bottom_Ann)
  pdf(file.path(outdir_heatmap,paste0(TF,'.pdf')),height=9,width=12)
  draw(h1)
  dev.off()
  #saveRDS(h1, file.path(outdir,'heatmap_data',paste0(TF,'.rds')))
  #write.table(mat_right, file.path(outdir,'clusters',paste0(TF,'clusters.tsv')), col.names = T, row.names = T, quote = F, sep='\t')
}
library(ggplot2)
max_TFs <- read.table("/data/miraldiNB/Katko/Projects/Barski_CD4_Multiome/Outs/Prior_MaxATAC/MaxATAC_q.tsv")
max_TFs <- colnames(max_TFs)
edges <- read.table("/data/miraldiNB/Katko/Projects/Julia/Inferelator_Julia/outputs/MEMT_TFA_100423_combined/combined/combined_cut01_sp.tsv", header = T)
edges_max <- read.table("/data/miraldiNB/Katko/Projects/Julia/Inferelator_Julia/outputs/MEMT_combined_100423_F/combined/combined_cut01_sp.tsv", header = T)
TFs <- c(unique(edges$TF))
max_TFs <- TFs %in% max_TFs
comparison <- data.frame(TF = TFs, Common = 0, Edge_Only = 0, Max_Only = 0, max = max_TFs)
for(TF in TFs){
    edges_targets <- edges$Gene[which(edges$TF == TF)]
    edges_max_targets <- edges_max$Gene[which(edges_max$TF == TF)]
    comparison$Common[which(comparison$TF == TF)] <- length(intersect(edges_targets, edges_max_targets))
    comparison$Edge_Only[which(comparison$TF == TF)] <- length(which(!(edges_targets %in% edges_max_targets)))
    comparison$Max_Only[which(comparison$TF == TF)] <- length(which(!(edges_max_targets %in% edges_targets)))
}
comparison_order1 <- order(comparison$Common / comparison$Edge_Only, decreasing = T)
comparison <- comparison[comparison_order1,]
comparison1 <- data.frame(TF = c(comparison$TF, comparison$TF), Value = c(comparison$Common, comparison$Edge_Only), type = c(rep("Common",length(comparison$Common)), rep("Edge_Only", length(comparison$Edge_Only))), max = c(comparison$max, comparison$max))
comparison2 <- data.frame(TF = c(comparison$TF, comparison$TF), Value = c(comparison$Common, comparison$Max_Only),type = c(rep("Common",length(comparison$Common)), rep("Max_Only", length(comparison$Edge_Only))),  max = c(comparison$max, comparison$max))
comparison1$TF <- factor(comparison1$TF, levels = comparison1$TF[1:762])
comparison2$TF <- factor(comparison2$TF, levels = comparison2$TF[1:762])
comparison1$type <- factor(comparison1$type, levels = c("Edge_Only", "Common"))
comparison2$type <- factor(comparison2$type, levels = c("Max_Only", "Common"))
head(comparison)
head(comparison, 100)
head(comparison, 200)
head(comparison, 700)
head(edges_max)
index <- which(edges_max$Gene == "IFNG")
edges$TF[index]
index2 <- which(edges$Gene == "IFNG")
edges_max$TF[index]
edges$TF[index]
edges_max$TF[index]
edges$TF[index2]
index <- which(edges_max$TF == "RUNX1"
)
index2 <- which(edges$TF == "RUNX1")
edges_max$Gene[index]
sort(edges_max$Gene[index])
which(edges$Gene == "LIGHT")
